let allOrders = []; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
let filteredOrders = []; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
const ordersPerPage = 10; // –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
let currentPage = 1; // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
async function loadOrders() {
    const container = document.getElementById('orders-list-container');
    container.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö...
        </div>
    `;

    try {
        const response = await fetch('php/get_all_orders.php');
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        
        allOrders = await response.json();
        applyFilters();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        container.innerHTML = `
            <div class="error">
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}
            </div>
        `;
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const period = document.getElementById('period-filter').value;
    const sortBy = document.getElementById('sort-filter').value;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filteredOrders = allOrders.filter(order => {
        const matchesSearch = (
            order.id.toString().includes(searchTerm) ||
            order.customer_name.toLowerCase().includes(searchTerm) ||
            order.phone.includes(searchTerm) ||
            order.address.toLowerCase().includes(searchTerm)
        );
        
        const orderDate = new Date(order.created_at);
        const now = new Date();
        let matchesPeriod = true;
        
        switch (period) {
            case 'today':
                matchesPeriod = orderDate.toDateString() === now.toDateString();
                break;
            case 'week':
                const weekAgo = new Date(now);
                weekAgo.setDate(now.getDate() - 7);
                matchesPeriod = orderDate >= weekAgo;
                break;
            case 'month':
                const monthAgo = new Date(now);
                monthAgo.setMonth(now.getMonth() - 1);
                matchesPeriod = orderDate >= monthAgo;
                break;
            case 'quarter':
                const quarterAgo = new Date(now);
                quarterAgo.setMonth(now.getMonth() - 3);
                matchesPeriod = orderDate >= quarterAgo;
                break;
        }
        
        return matchesSearch && matchesPeriod;
    });
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filteredOrders.sort((a, b) => {
        switch (sortBy) {
            case 'oldest':
                return new Date(a.created_at) - new Date(b.created_at);
            case 'price_high':
                return b.total_price - a.total_price;
            case 'price_low':
                return a.total_price - b.total_price;
            default: // 'newest'
                return new Date(b.created_at) - new Date(a.created_at);
        }
    });
    
    renderOrders();
    updatePagination();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
function renderOrders() {
    const start = (currentPage - 1) * ordersPerPage;
    const end = start + ordersPerPage;
    const pageOrders = filteredOrders.slice(start, end);
    
    const container = document.getElementById('orders-list-container');
    
    if (pageOrders.length === 0) {
        container.innerHTML = '<div class="no-orders">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = pageOrders.map(order => {
        const orderDate = new Date(order.created_at);
        const formattedDate = orderDate.toLocaleString('ru-RU');
        
        // –†–ê–°–ß–ï–¢ –°–ö–ò–î–ö–ò
        const discount = parseFloat(order.discount) || 0;
        const subtotal = (parseFloat(order.total_price) + discount).toFixed(2);
        
        return `
            <div class="order-row">
                <div>${order.id}</div>
                <div>${formattedDate}</div>
                <div>${order.customer_name}</div>
                <div>${order.address}</div>
                <div>${order.phone}</div>
                <div>${order.total_price} —Ä—É–±.${discount ? `<br><span class="discount">-${discount} —Ä—É–±.</span>` : ''}</div>
                <div>
                    <button class="action-btn" title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏">üëÅÔ∏è</button>
                </div>
                <div class="order-details">
                    <h3>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #${order.id}</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>–¢–æ–≤–∞—Ä</th>
                                <th>–¶–µ–Ω–∞</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                                <th>–°—É–º–º–∞</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${order.items.map(item => `
                                <tr>
                                    <td>${item.product_name}</td>
                                    <td>${item.product_price} —Ä—É–±.</td>
                                    <td>${item.quantity}</td>
                                    <td>${(item.product_price * item.quantity).toFixed(2)} —Ä—É–±.</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    <!-- –ë–õ–û–ö –°–ö–ò–î–ö–ò -->
                    ${discount ? `
                    <div class="order-summary">
                        <div>–°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: ${subtotal} —Ä—É–±.</div>
                        <div>–°–∫–∏–¥–∫–∞: ${discount} —Ä—É–±.</div>
                        <div>–ò—Ç–æ–≥–æ: ${order.total_price} —Ä—É–±.</div>
                    </div>
                    ` : ''}
                </div>
            </div>
        `;
    }).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function updatePagination() {
    const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
    const pagination = document.querySelector('.pagination');
    pagination.innerHTML = '';
    
    for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement('button');
        btn.className = 'page-btn';
        if (i === currentPage) btn.classList.add('active');
        btn.textContent = i;
        btn.addEventListener('click', () => {
            currentPage = i;
            renderOrders();
        });
        pagination.appendChild(btn);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventHandlers() {
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    document.getElementById('orders-list-container').addEventListener('click', e => {
        if (e.target.classList.contains('action-btn')) {
            const orderRow = e.target.closest('.order-row');
            const details = orderRow.querySelector('.order-details');
            const isActive = details.classList.contains('active');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ—Ç–∞–ª–∏
            document.querySelectorAll('.order-details.active').forEach(d => {
                d.classList.remove('active');
                d.closest('.order-row').querySelector('.action-btn').textContent = 'üëÅÔ∏è';
            });
            
            if (!isActive) {
                details.classList.add('active');
                e.target.textContent = '‚úñÔ∏è';
            }
        }
    });
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.getElementById('apply-filters').addEventListener('click', applyFilters);
    
    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.getElementById('reset-filters').addEventListener('click', () => {
        document.getElementById('period-filter').value = 'all';
        document.getElementById('sort-filter').value = 'newest';
        document.getElementById('search-input').value = '';
        applyFilters();
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    initEventHandlers();
    loadOrders();
});