async function loadAdminProducts() {
    const loadingIndicator = document.getElementById('loading');
    const productsGrid = document.getElementById('admin-products');
    
    loadingIndicator.style.display = 'flex';
    productsGrid.innerHTML = '';

    try {
        const response = await fetch('php/get_products_admin.php');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const products = await response.json();
        
        if (products.length === 0) {
            productsGrid.innerHTML = '<p class="no-products">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
            return;
        }


        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products.forEach(product => {
            const imageUrl = product.image 
                ? product.image.startsWith('/') 
                    ? window.location.origin + product.image 
                    : product.image
                : 'https://via.placeholder.com/300x200?text=No+Image';
        
            const productCard = document.createElement('div');
            productCard.className = 'admin-product-card';
            
            const categoryName = getCategoryName(product.category);
            
            // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            productCard.innerHTML = `
            <div class="product-image-container">
                <img src="${imageUrl}" 
                     alt="${product.product_name}"
                     loading="lazy"
                     onerror="this.onerror=null; this.src='https://via.placeholder.com/300x200?text=Image+Error'">
                <div class="visibility-badge ${product.is_visible ? 'visible' : 'hidden'}">
                    ${product.is_visible ? '–í–∏–¥–∏–º—ã–π' : '–°–∫—Ä—ã—Ç—ã–π'}
                </div>
                <div class="image-text-overlay">${product.product_name}</div>
            </div>
            <div class="product-info">
                <h4>${product.product_name}</h4>
                <div class="price">${product.product_price.toLocaleString('ru-RU')} ‚ÇΩ</div>
                <div class="category">${categoryName}</div>
                <!-- –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ -->
                <div class="stock">–í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.</div>
            </div>
            <div class="product-actions">
                <button class="btn edit-btn" data-id="${product.id}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="btn toggle-visibility-btn" data-id="${product.id}" data-visible="${product.is_visible}">
                    ${product.is_visible ? 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å' : 'üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å'}
                </button>
                <button class="btn delete-btn" data-id="${product.id}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        productCard.querySelector('.toggle-visibility-btn').addEventListener('click', (e) => {
            toggleProductVisibility(e.target.dataset.id, e.target.dataset.visible === '1');
        });
            
            productsGrid.appendChild(productCard);
        });

        // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–µ—Å—å
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', (e) => fillEditForm(e.target.dataset.id));
        });
        
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', (e) => deleteProduct(e.target.dataset.id));
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        productsGrid.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</p>`;
    } finally {
        loadingIndicator.style.display = 'none';
    }
}

async function fillEditForm(productId) {
    try {
        console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: ${productId}`);
        const response = await fetch(`php/get_product_by_id.php?id=${productId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const product = await response.json();
        console.log("–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:", product);
        
        // 1. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const nameField = document.getElementById('product-name');
        if (nameField) {
            nameField.value = product.product_name || '';
            console.log("–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", product.product_name);
        } else {
            console.error('–ü–æ–ª–µ product-name –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        }
        
        // 2. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        const priceField = document.getElementById('product-price');
        if (priceField) {
            priceField.value = product.product_price || 0;
            console.log("–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:", product.product_price);
        } else {
            console.error('–ü–æ–ª–µ product-price –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        }
        
        // 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categorySelect = document.getElementById('product-category');
        if (categorySelect) {
            const categoryValue = (product.category || '').trim().toLowerCase();
            
            let foundOption = null;
            for (let option of categorySelect.options) {
                const optionValue = option.value.toLowerCase();
                if (optionValue === categoryValue) {
                    foundOption = option;
                    break;
                }
            }
            
            if (foundOption) {
                foundOption.selected = true;
            } else {
                console.warn(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${product.category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞`);
                categorySelect.selectedIndex = 0;
            }
        }
        
        // 4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        const descriptionField = document.getElementById('product-description');
        if (descriptionField) {
            descriptionField.value = product.description || '';
            console.log("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", product.description);
        } else {
            console.error('–ü–æ–ª–µ product-description –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        }
        
        // 5. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–î–û–ë–ê–í–õ–ï–ù–û)
        const stockField = document.getElementById('product-stock');
        if (stockField) {
            stockField.value = product.stock || 0;
            console.log("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", product.stock);
        } else {
            console.error('–ü–æ–ª–µ product-stock –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        }
        
        // 6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID —Ç–æ–≤–∞—Ä–∞
        const idField = document.getElementById('edit-product-id');
        if (idField) {
            idField.value = product.id;
            console.log("ID —Ç–æ–≤–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", product.id);
        }
        
        // 7. –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const preview = document.getElementById('image-preview');
        if (preview) {
            if (product.image && product.image.trim() !== '') {
                const fullImageUrl = product.image.startsWith('/') 
                    ? window.location.origin + product.image
                    : product.image;
                
                preview.src = fullImageUrl;
                preview.style.display = 'block';
            } else {
                preview.style.display = 'none';
            }
        }
        
        // 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.getElementById('form-title').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
        document.getElementById('submit-btn').textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        document.getElementById('cancel-edit').style.display = 'inline-block';
        
        console.log("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞");
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

// ================ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ================


function getCategoryName(category) {
    const normalizedCategory = category ? category.trim().toLowerCase() : '';
    
    const names = {
        'dogs': 'üêï –î–ª—è —Å–æ–±–∞–∫',
        'cats': 'üê± –î–ª—è –∫–æ—à–µ–∫',
        'other': 'üêæ –î—Ä—É–≥–æ–µ'
    };
    
    return names[normalizedCategory] || category || ' ';
}

// ================ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ================
async function deleteProduct(productId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?')) return;

    try {
        const response = await fetch(`php/delete_product.php?id=${productId}`);
        const result = await response.json();
        
        if (result.success) {
            alert(result.message);
            loadAdminProducts();
        } else {
            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

async function toggleProductVisibility(productId, currentVisibility) {
    try {
        const response = await fetch('php/toggle_visibility.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `id=${productId}&is_visible=${currentVisibility ? 0 : 1}`
        });
        
        const result = await response.json();
        
        if (result.success) {
            loadAdminProducts();
        } else {
            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

// ================ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ================
document.addEventListener('DOMContentLoaded', () => {
    loadAdminProducts();

    document.getElementById('cancel-edit').addEventListener('click', () => {
        document.getElementById('add-product-form').reset();
        document.getElementById('edit-product-id').value = '';
        document.getElementById('image-preview').style.display = 'none';
        document.getElementById('form-title').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä';
        document.getElementById('submit-btn').textContent = 'üöÄ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
        document.getElementById('cancel-edit').style.display = 'none';
    });

    document.getElementById('product-image').addEventListener('change', function(e) {
        const preview = document.getElementById('image-preview');
        if (this.files && this.files[0]) {
            const reader = new FileReader();
            reader.onload = (e) => {
                preview.src = e.target.result;
                preview.style.display = 'block';
            }
            reader.readAsDataURL(this.files[0]);
        }
    });
});

document.getElementById('add-product-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const isEditMode = !!document.getElementById('edit-product-id').value;
    const url = isEditMode ? 'php/update_product.php' : 'php/add_product.php';

    try {
        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            alert(result.message);
            this.reset();
            document.getElementById('edit-product-id').value = '';
            document.getElementById('image-preview').style.display = 'none';
            document.getElementById('form-title').textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä';
            document.getElementById('submit-btn').textContent = 'üöÄ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
            document.getElementById('cancel-edit').style.display = 'none';
            
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            const errorMsg = result.error || 
                            (result.errors ? result.errors.join('\n') : 
                            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            alert(`–û—à–∏–±–∫–∞: ${errorMsg}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
    }
});